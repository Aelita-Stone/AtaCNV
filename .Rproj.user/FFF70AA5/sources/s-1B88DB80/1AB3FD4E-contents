dir()
getwd()
chr_info <- readRDS("../data/chr_length_hg38.rds")
View(chr_info)
chr_length_hg38 <- readRDS("../data/chr_length_hg38.rds")
usethis::data\
usethis::use_data(chr_length_hg38)
chr_length_hg19 <- readRDS("../data/chr_length_hg19.rds")
usethis::use_data(chr_length_hg19)
devtools::document()
devtools::document()
chr_info <- data("chr_length_hg19")
data("chr_length_hg19")
data("chr_length_hg19")
devtools::document()
devtools::document()
devtools::document()
help(cor)
bin <- readRDS("../data/bin_K=1e+06_hg19.RDS")
View(bin)
gene_pos <- read.table("../data/hg19_gene.bed")
bin$gene <- 0
for(i in 1:nrow(bin)){
bin$gene[i] <- sum(gene_pos$V1==bin$chr[i] & gene_pos$V2>=bin$start[i]
& gene_pos$V3<=bin$end[i])
}
View(bin)
saveRDS(bin,"../data/bin_K=1e+06_hg19.RDS")
bin_info_hg19 <- bin
usethis::use_data(bin_info_hg19)
bin <- readRDS("../data/bin_K=1e+06_hg38.RDS")
gene_pos <- read.table("../data/hg38_gene.bed")
bin$gene <- 0
for(i in 1:nrow(bin)){
bin$gene[i] <- sum(gene_pos$V1==bin$chr[i] & gene_pos$V2>=bin$start[i]
& gene_pos$V3<=bin$end[i])
}
saveRDS(bin,"../data/bin_K=1e+06_hg38.RDS")
bin_info_hg38 <- bin
usethis::use_data(bin_info_hg38)
devtools::document()
devtools::document()
devtools::document()
usethis::use_package(dlm, type = "Imports", min_version = NULL)
usethis::use_package("dlm", type = "Imports", min_version = NULL)
usethis::use_mit_license()
devtools::document()
getwd()
devtools::load_all()
devtools::load_all()
barcodes <- read.table("../Rpkg_test/barcodes.tsv")
View(barcodes)
barcodes <- read.table("../Rpkg_test/barcodes.tsv")$V1
generate_input(fragment_file="../Rpkg_test/fragments.tsv.gz",
genome="hg38",
cell_barcodes=barcodes,
output_dir="../Rpkg_test/")
devtools::document()
devtools::load_all()
setwd("../Rpkg_test/")
barcodes <- read.table("barcodes.tsv")$V1
generate_input(fragment_file="fragments.tsv.gz",
genome="hg38",
cell_barcodes=barcodes,
output_dir="./")
count <- readRDS("input.rds")
count_paired <- readRDS("./input_paired.rds")
help(generate_input)
library(ArchR)
proj <- loadArchRProject("../data/GSE129785/SU008_Tumor_Post/ArchR_subset/")
norm_result <- normalize(count=count,
mode="matched normal sample",
count_paired=count_paired,
cell_cluster=proj$Clusters
)
devtools::load_all()
devtools::load_all(path="../AtaCNV/")
norm_result <- normalize(count=count,
mode="matched normal sample",
count_paired=count_paired,
cell_cluster=proj$Clusters,
output_dir="./"
)
count <- t(readRDS("input.rds"))
count_paired <- t(readRDS("./input_paired.rds"))
devtools::document()
devtools::document("../AtaCNV/")
norm_result <- normalize(count=count,
mode="matched normal sample",
count_paired=count_paired,
cell_cluster=proj$Clusters,
output_dir="./"
)
devtools::document(path="../AtaCNV/")
devtools::document(pkg="../AtaCNV/")
devtools::load_all(path="../AtaCNV/")
norm_result <- normalize(count=count,
mode="matched normal sample",
count_paired=count_paired,
cell_cluster=proj$Clusters,
output_dir="./"
)
devtools::document(pkg="../AtaCNV/")
devtools::load_all(path="../AtaCNV/")
norm_result <- normalize(count=count,
mode="matched normal sample",
count_paired=count_paired,
cell_cluster=proj$Clusters,
output_dir="./"
)
dim(count)[2]
devtools::document(pkg="../AtaCNV/")
devtools::load_all(path="../AtaCNV/")
norm_result <- normalize(count=count,
mode="matched normal sample",
genome="hg19",
count_paired=count_paired,
cell_cluster=proj$Clusters,
output_dir="./"
)
devtools::document(pkg="../AtaCNV/")
devtools::load_all(path="../AtaCNV/")
norm_result <- normalize(count=count,
mode="matched normal sample",
genome="hg19",
count_paired=count_paired,
cell_cluster=proj$Clusters,
output_dir="./"
)
devtools::document(pkg="../AtaCNV/")
devtools::load_all(path="../AtaCNV/")
norm_result <- normalize(count=count,
mode="matched normal sample",
genome="hg19",
count_paired=count_paired,
cell_cluster=proj$Clusters,
output_dir="./"
)
devtools::document(pkg="../AtaCNV/")
devtools::load_all(path="../AtaCNV/")
norm_result <- normalize(count=count,
mode="matched normal sample",
genome="hg19",
count_paired=count_paired,
cell_cluster=proj$Clusters,
output_dir="./"
)
setwd("D:/work/ATAC_CNV/")
source("./code/utils.R")
FScorefunc <- function(x, f){
return(f*x/(2*x-f))
}
ncell <- 1000
plot_dir <- paste0("./analysis_0/plot_ncell=",ncell,"/")
result1 <-
read.csv(paste0("./analysis_0/sim_data1/result_ncell=",ncell,".csv"))
result2 <-
read.csv(paste0("./analysis_0/sim_data2/result_ncell=",ncell,".csv"))
result3 <-
read.csv(paste0("./analysis_0/sim_data3/result_ncell=",ncell,".csv"))
result4 <-
read.csv(paste0("./analysis_0/sim_data4/result_ncell=",ncell,".csv"))
result5 <-
read.csv(paste0("./analysis_0/sim_data5/result_ncell=",ncell,".csv"))
result6 <-
read.csv(paste0("./analysis_0/sim_data6/result_ncell=",ncell,".csv"))
result7 <-
read.csv(paste0("./analysis_0/sim_data7/result_ncell=",ncell,".csv"))
result8 <-
read.csv(paste0("./analysis_0/sim_data8/result_ncell=",ncell,".csv"))
result <- (result1+result2+result3+result4+result5)/5
df1 <- data.frame(result[,1:4],
mse=result$mse1, acc=result$acc1,
sen=result$sen1, fdr=result$fdr1, spe=result$spe1,
method="method")
df2 <- data.frame(result[,1:4],
mse=result$mse2, acc=result$acc2,
sen=result$sen2, fdr=result$fdr2, spe=result$spe2,
method="copyscAT")
df3 <- data.frame(result[,1:4],
mse=result$mse3, acc=result$acc3,
sen=result$sen3, fdr=result$fdr3, spe=result$spe3,
method="baseline")
df <- rbind(df1,df2,df3)
df <- df[df$coverage!=0.75 & df$ngroup!=0,]
df$color <- "#FF6B6B"
df$color[df$method=="copyscAT"] <- "#4D96FF"
df$color[df$method=="baseline"] <- "#36AE7C"
# df$shape <- 0
# df$shape[df$ngroup==2] <- 1
# df$shape[df$ngroup==3] <- 2
# df$shape[df$ngroup==4] <- 5
df$shape <- 15
df$shape[df$ngroup==2] <- 16
df$shape[df$ngroup==3] <- 17
df$shape[df$ngroup==4] <- 18
df$Precision <- df$sen
df$Recall <- 1-df$fdr
help(dlm)
usethis::use_package("edgeR")
usethis::use_package("irlba")
usethis::use_package("ComplexHeatmap")
knn.index()
?knn.index
??knn.index
usethis::use_package("parallelDist")
devtools::document()
D:/work/ATAC_CNV/AtaCNV/R/utils.R
devtools::document()
devtools::document()
usethis::use_package("ComplexHeatmap")
usethis::use_package("circlize")
usethis::use_package("RColorBrewer")
usethis::use_package("grid")
