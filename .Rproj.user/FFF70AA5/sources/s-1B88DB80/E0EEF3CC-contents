library(ggplot2)
library(scales)
library(Matrix)
library(rdist)
library(ComplexHeatmap)
library(mclust)
library(edgeR)
library(smooth)
library(reshape2)
library(grid)
library(RColorBrewer)
library(circlize)
library(parallelDist)
library(jointseg)
library(FNN)
library(mixR)
library(irlba)
library(dplyr)
library(ArchR)
library(umap)

bin <- NULL
count <- NULL
select <- dplyr::select

merge_bkp <- function(bkp1,bkp2,min_interval=3){
  # bkp2 all reserved
  for(i in bkp1){
    if(min(abs(bkp2-i)>min_interval)){
      bkp2[length(bkp2)+1] <- i
    }
  }
  return(bkp2)
}

merge_crit1 <- function(x1,x2,thre=0.8){
  return(cor(x1,x2,method="pearson")>thre)
}

merge_crit2 <- function(x1,x2,thre=0.1){
  return(mean(abs(x1-x2))<thre)
}

merge_crit3 <- function(x1,x2,cluster,thre=0.1){
  f <- T
  for(i in unique(cluster)){
    f <- f & mean(abs(x1-x2)[cluster==i])<thre
  }
  return(f)
}

str2bin <- function(bin_name){
  temp <- strsplit(bin_name, split="_")
  temp2 <- unlist(temp)
  dim(temp2) <- c(3,length(temp2)/3)
  bins <- data.frame(chr=temp2[1,],start=as.numeric(temp2[2,]),
                     end=as.numeric(temp2[3,]))
  bins$n <- c(1:nrow(bins))
  return(bins)
}

bin2str <- function(bin){
  return(paste0(bin$chr,"_",bin$start,"_",bin$end))
}

bin2chrbkp <- function(bins){
  chr_bkp <- c(0)
  temp <- unique(bins$chr)
  for(i in 1:length(temp)){
    chr_bkp[i+1] <- max(bins$n[bins$chr==temp[i]])
  }
  return(chr_bkp)
}

common_bkp <- function(bkp1, bkp2, chr_bkp, min_dist=10){
  temp <- c()
  for(i in bkp1){
    if(i==0 | i %in% chr_bkp){
      next
    }
    if(min(abs(bkp2-i))<=min_dist){
      temp <- c(temp,i)
    }
  }
  return(temp)
}

copyscat_format_bin <- function(count, bin, add_chrM=T, 
                                add_cell_suffix=F){
  count <- t(count)
  if(add_chrM){
    count <- cbind(count, 0)
  }
  temp <- paste0(bin$chr, "_", format(bin$start, scientific = FALSE))
  if(add_chrM){
    temp <- c(temp, "chrM_0")
  }
  colnames(count) <- temp
  if(add_cell_suffix){
    rownames(count) <- paste0(rownames(count), "-1")
  }
  return(count)
}

interpret_copyscat_re <- function(arm_range_dir, copyscat_re_dir,
                                  cell_barcodes="none"){
  arm_range <- readRDS(arm_range_dir)
  f <- arm_range$arm!="cen"
  
  copySCAT_re <- read.csv(copyscat_re_dir)
  if(nrow(copySCAT_re)==0){
    ncell <- length(cell_barcodes)
    norm_count <- matrix(data=2, nrow=ncell, ncol=sum(f))
    rownames(norm_count) <- cell_barcodes
    colnames(norm_count) <- bin2str(arm_range[f,])
    return(norm_count)
  }
  
  norm_count <- matrix(data=2, nrow=nrow(copySCAT_re), ncol=sum(f)) 
  rownames(norm_count) <- copySCAT_re$rowname
  colnames(norm_count) <- bin2str(arm_range[f,])
  
  for(i in 2:ncol(copySCAT_re)){
    temp <- colnames(copySCAT_re)[i]
    temp_arm <- substring(temp, nchar(temp))
    temp_chr <- substring(temp, 0, nchar(temp)-1)
    f1 <- arm_range$chr==temp_chr & arm_range$arm==temp_arm
    f1 <- f1[f]
    norm_count[,f1] <- matrix(data=copySCAT_re[,i],
                              nrow=nrow(copySCAT_re), ncol=sum(f1))
  }
  return(norm_count)
}

binCNV2armCNV <- function(CNV){
  bin <- str2bin(colnames(CNV))
  bin$n <- 1:nrow(bin)
  temp <- unique(bin$chr)
  arm_CNV <- matrix(nrow=nrow(CNV),ncol=2*length(temp))
  arm_list <- c()
  for(i in 1:length(temp)){
    chr_ <- temp[i]
    j1 <- min(bin$n[bin$chr==chr_])
    j2 <- max(bin$n[bin$chr==chr_])
    arm_CNV[,2*i-1] <- CNV[,j1]
    arm_CNV[,2*i] <- CNV[,j2]
    arm_list[2*i-1] <- paste0(chr_,"p")
    arm_list[2*i] <- paste0(chr_,"q")
  }
  colnames(arm_CNV) <- arm_list
  rownames(arm_CNV) <- rownames(CNV)
  return(arm_CNV)
}

CNV2gain_loss <- function(x, mean=0, t1=0.2, t2=-0.2){
  y <- x
  y[x>mean+t1] <- 1
  y[x<mean+t2] <- -1
  y[x<=mean+t1 & x>=mean+t2] <- 0
  return(y)
}

de_gene <- function(count1, count2, n=500){
  ## row for genes
  diff_logfc <- c(1:nrow(count1))
  diff_pvalue <- c(1:nrow(count1))
  for (i in 1:nrow(count1)){
    diff_pvalue[i] <- wilcox.test(count1[i,], count2[i,], 
                                    alternative="t")$p.value
    diff_logfc[i] <- log2(mean(count1[i,])/mean(count2[i,]))
  }
  diff_pvalue <- p.adjust(diff_pvalue)
  diff_logfc[is.na(diff_logfc)] <- -1
  diff_pvalue[is.na(diff_pvalue)] <- 1
  temp <- sort(diff_pvalue, decreasing=F, index.return=T)$ix
  diff_gene <- rownames(count1)[temp[1:n]]
  # diff_gene <- colnames(count)[-1][diff_pvalue<t]
  return(diff_gene)
}

decide_normal_cluster <- function(CNV, cluster, m=1, method="mean+mse"){
  for(i in unique(cluster)){
    f <- cluster==i
    n <- sum(f)
    temp <- CNV[f,]
    if(method == "mse"){
      s <- mean((temp-m)^2)
    }
    if(method == "mean+mse"){
      s <- mean((apply(temp,2,mean)-m)^2)
    }
    print(paste0("cluster ",i,": ",n,"cells ","mse=",s))
  }
}

calculate_CNV_score <- function(CNV, cluster, m=1, method="mean+mse", delXY=T){
  S <- c(1:length(cluster))
  if(delXY){
    bin <- str2bin(colnames(CNV))
    CNV <- CNV[,!bin$chr %in% c("chrX","chrY")]
  }
  for(i in unique(cluster)){
    f <- cluster==i
    temp <- CNV[f,]
    if(method == "mse"){
      s <- mean((temp-m)^2)
    }
    if(method == "mean+mse"){
      s <- mean((apply(temp,2,mean)-m)^2)
    }
    S[f] <- s
  }
  return(S)
}

mean_ratio_of_cluster <- function(CNV, cluster){
  tmp <- unique(cluster)
  m <- matrix(nrow=length(tmp), ncol=ncol(CNV))
  for(i in 1:length(tmp)){
    f <- cluster==tmp[i]
    if(sum(f)!=1){
      m[i,] <- apply(CNV[f,], 2, mean)
    }else{
      m[i,] <- CNV[f,]
    }
  }
  rownames(m) <- tmp
  colnames(m) <- colnames(CNV)
  return(m)
}

calculate_CNV_score_single_cell <- function(CNV, m=1, method="mean+mse", delXY=T){
  if(delXY){
    bin <- str2bin(colnames(CNV))
    CNV <- CNV[,!bin$chr %in% c("chrX","chrY")]
  }
  tmp <- (CNV-m)^2
  S <- apply(tmp, 1, mean)
  return(S)
}

count_change_bin <- function(count1, bin1, ref="hg38"){
  # count1: small_bin * cell
  bin <- readRDS(paste0("./data/bin_K=1e+06_", ref, ".RDS"))
  idx <- matrix(1:nrow(bin), ncol=1, nrow=nrow(bin))
  temp_func <- function(i){
    f <- bin1$chr==bin$chr[i] & bin1$start>=bin$start[i] & bin1$end<=bin$end[i]
    if(sum(f)==0){
      return(rep(0, ncol(count1)))
    }
    if(sum(f)==1){
      return(count1[f,])
    }
    return(colSums(count1[f,]))
  }
  count <- apply(idx, 1, FUN=temp_func)
  colnames(count) <- bin2str(bin)
  return(count)
}

del_chr <- function(count, chr_list=c("chrX","chrY")){
  bin <- str2bin(colnames(count))
  return(count[,!bin$chr %in% chr_list])
}

diff_feature <- function(count, group){
  diff_logfc <- c(1:nrow(count))
  diff_pvalue <- c(1:nrow(count))
  diff_value <- c(1:nrow(count))
  for (i in 1:nrow(count)){
    print(i)
    temp0 <- count[i,group==0]
    temp1 <- count[i,group==1]
    diff_pvalue[i] <- wilcox.test(temp0, temp1, alternative="t")$p.value
    diff_logfc[i] <- log2(mean(temp0)/mean(temp1))
    diff_value[i] <- mean(temp0)-mean(temp1)
  }
  diff_pvalue <- p.adjust(diff_pvalue)
  temp <- sort(diff_pvalue, decreasing=F, index.return=T)$ix
  df <- data.frame(feature=rownames(count), p=diff_pvalue, logfc=diff_logfc,
                   diff=diff_value)
  #df <- df[temp,]
  df$logp <- -log(df$p)
  df$enriched <- 0
  df$enriched[df$diff<0] <- 1
  return(df)
}

get_gene_pos <- function(gene_list){
  ensembl <- useMart("ensembl")
  ensembl <- useDataset("hsapiens_gene_ensembl",mart=ensembl)
  gene_pos <- getBM(attributes=c('hgnc_symbol', 'chromosome_name', 'start_position', 'end_position'),
                    filters=c('hgnc_symbol'),
                    values=list(gene_list),
                    mart=ensembl)
  # gene_pos <- gene_pos[gene_pos$chromosome_name %in% c(1:22,"X","Y"),]
  colnames(gene_pos) <- c("symbol","chr","start","end")
  gene_pos$chr <- paste0("chr",gene_pos$chr)
  # rownames(gene_pos) <- gene_pos$symbol
  return(gene_pos)
}
